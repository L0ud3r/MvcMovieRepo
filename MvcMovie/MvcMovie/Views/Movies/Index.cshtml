@model MvcMovie.Models.MovieGenreViewModel

@{
    Layout = "/Views/Shared/App/_Layout.cshtml";
    ViewData["Title"] = "Index";
}

<h1>Movies</h1>

<form id="search-form" asp-controller="Movies" asp-action="Index" method="get">
    <div class="d-flex flex-row mt-4 mb-2 align-items-center">
        <div class="col-0">
            <select id="genre-filter" multiples="multiples" class="select2-genre" style="width:200px">
                <option value="">All Genres</option>
            </select>
        </div>
        <div class="input-group col-3">
            <input type="text" id="title-filter" asp-for="SearchString" class="form-control border-0 small" placeholder="Movie..." />
            <input type="submit" id="search-button" value="Filter" onclick="submitSearch(event)" class="btn btn-primary" />
        </div>
    </div>
</form>

<a asp-action="Create" class="btn btn-primary btn-icon-split mb-3">
    <span class="icon text-white-50">
        <i class="fa fa-plus"></i>
    </span>
    <span class="text">Add Movie</span>
</a>

<table class="table-borderless"
       id="table"
       data-toggle="table"
       data-query-params="queryParams"
       data-pagination="true"
       data-detail-formatter="detailsTab"
       data-id-field="id"
       data-page-list="[10, 25, 50, 100, all]"
       data-side-pagination="server"
       data-url="https://localhost:7022/Movies/Paginate"
       data-method="POST"
       data-search="false"
       data-locale="en-US">
    <thead class="thead-light">
        <tr>
            <th data-field="title">Title</th>
            <th data-field="releaseDate" data-formatter="dateFormat">Release Date</th>
            <th data-field="genreName">Genre</th>
            <th data-field="" data-formatter="operateFormatter">Actions</th>
        </tr>
    </thead>
</table>

<div class="modal fade" id="deleteConfirmModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
     aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Are you sure you want to remove this movie?</h5>
                <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">Select "Yes" below if you want to remove this movie.</div>
            <div class="modal-footer">
                <button class="btn btn-secondary" type="button" data-dismiss="modal">No</button>
                <form id="deleteMovie" method="post">
                    <input type="hidden" id="delete-movie-id" name="id" value="" />
                    <button type="submit" class="btn btn-primary">Yes</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
        $(function() {
            var select = $('#genre-filter');
    
            $.ajax({
                url: 'https://localhost:7022/Genre/UsedGenres',
                type: 'GET',
                success: function(response) {
                    console.log(response);
                    $.each(response, function(index, item) {
                        select.append('<option>' + item.text + '</option>');
                    });
                }
            });

            function deleteMovieForm(e) {
                var id = $('#delete-movie-id').val();

                $.ajax({
                    url: `https://localhost:7022/Movies/Delete?id=${id}`,
                    type: 'DELETE',
                    contentType: 'application/json-patch+json',
                    success: function (response) {
                        alert("Movie deleted successfully!")
                        //$('#table').bootstrapTable('refresh')
                        location.reload();
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert("Something went wrong...")
                    }
                });
            }

            $('#deleteMovie').on('submit', function (event) {
                event.preventDefault();
                deleteMovieForm(event);
            });
        });

        var $table = $('#table')
        var $remove = $('#remove')
        var selections = []

        function submitSearch(event){
            event.preventDefault()
            $('#table').bootstrapTable('refresh')
        }

        function getIdSelections() {
            return $.map($table.bootstrapTable('getSelections'), function (row) {
                return row.id
            })
        }

        function responseHandler(res) {
            $.each(res.rows, function (i, row) {
                row.state = $.inArray(row.id, selections) !== -1
            })
            return res
        }

        function detailFormatter(index, row) {
            var html = []
            $.each(row, function (key, value) {
                html.push('<p><b>' + key + ':</b> ' + value + '</p>')
            })
            return html.join('')
        }

        function favAlert() {
            alert("Added to favourites!");
        }

        function detailsTab(index, row) {
            var html = [];
            html.push('<p><b>Title:</b> ' + row.title + '</p>');
            html.push('<p><b>Id:</b> ' + row.id + '</p>');
            return html.join('');
        }

        function operateFormatter(value, row, index) {
            var inFavorites = row.inFavorites === true; // assuming the `inFavorites` property is returned by the server
            var icon = inFavorites ? 'fa-heart' : 'fa-heart-broken';
            var title = inFavorites ? 'Remove from favorites' : 'Add to favorites';

            $.ajax({
                url: '/Favourites/IsFavourite',
                data: { movieId: row.id },
                type: 'GET',
                success: function(result) {
                    if (result) {
                        likeIcon = 'fa fa-heart';
                        likeTitle = 'Add to favorites';
                    }
                },
                error: function(result){

                }
            });


            

            return [
                '<div style="display: flex; gap: 10px">',
                `<a class="remove" href="#" title="Remove" onclick="deleteMovie(${row.id})" data-toggle="modal" data-target="#deleteConfirmModal">`,
                '<i class="fa fa-trash"></i>',
                '</a>  ',
                `<a class="edit" href="/Movies/Edit/${row.id}" title="Edit">`,
                '<i class="fa fa-pen"></i>',
                '</a>  ',
                `<a class="details" href="/Movies/Details/${row.id}" title="Details">`,
                '<i class="fa fa-eye"></i>',
                '</a>',
                `<a class="like" title="Like" data-id="${row.id}">`,
                '<i class="fa fa-heart"></i>',
                '</a>  ',
                '</div>'
            ].join('');
        }

        $(document).on('click', '.like', function() {
            var data = {
                movieId: $(this).data('id'),
                token: localStorage.getItem('token')
            }

            $.ajax({
                url: `https://localhost:7022/Favourites/Update`,
                method: 'POST',
                data: JSON.stringify(data),
                contentType: "application/json",
                success: function () {
                    alert('Movie added/removed to favourites!');
                },
                error: function () {
                    alert('An error occurred');
                }
            });
        });

        function deleteMovie(id) {
            $('#delete-movie-id').val(id);
        }

        function totalTextFormatter(data) {
            return 'Total'
        }

        function totalNameFormatter(data) {
            return data.length
        }

        function totalPriceFormatter(data) {
            var field = this.field
            return '$' + data.map(function (row) {
                return +row[field].substring(1)
            }).reduce(function (sum, i) {
                return sum + i
            }, 0)
        }

        $(document).ready(function () {
            $('.select2-genre').select2();
            $('.select2-movie').select2();
        });

        function queryParams(params) {
            const genreFilter = $('#genre-filter').val();
            const titleFilter = $('#title-filter').val();
            var search = [];
            search.push({
                name: "Genre",
                value: genreFilter
            });
            search.push({
                name: "Title",
                value: titleFilter
            });
            params.search = search;
            return JSON.stringify(params);
        }

        //$(document).ready(function() {
        //    // Bind a handler to the search form submission
        //    $('#search-form').submit(function(event) {
        //        // Prevent the default form submission behavior
        //        event.preventDefault();
        //        // Get the values from the form
        //        var genre = $('#genre-filter').val();
        //        var title = $('#title-filter').val();
        //        // Send the search request to the server
        //        $.ajax({
        //            url: 'https://localhost:7022/Movies/Paginate',
        //            type: 'POST',
        //            data: JSON.stringify({
        //                offset: 0,
        //                limit: 0,
        //                search: [
        //                    {
        //                        name: 'Genre',
        //                        value: genre
        //                    },
        //                    {
        //                        name: 'Title',
        //                        value: title
        //                    }
        //                ]
        //            }),
        //            success: function(result) {
        //                // Update the table with the search results
        //            },
        //            error: function(xhr, status, error) {
        //                console.log('An error occurred while performing the search: ' + error);
        //            }
        //        });
        //    });
        //});

        function dateFormat(value, row, index) {
            if (value) {
                var date = new Date(value);
                var day = date.getDate();
                var month = date.getMonth() + 1;
                var year = date.getFullYear();

                // Adiciona um zero à esquerda para dias e meses menores que 10
                day = day < 10 ? '0' + day : day;
                month = month < 10 ? '0' + month : month;

                // Formata a data no formato desejado
                return day + '-' + month + '-' + year;
            } else {
                return '-';
            }
        }

    </script>
}
