@model MvcMovie.Models.MovieGenreViewModel

@{
    Layout = "/Views/Shared/App/_Layout.cshtml";
    ViewData["Title"] = "Index";
}

<h1>Your Favourite Movies</h1>

<form id="search-form" asp-controller="Favourites" asp-action="Index" method="get">
    <div class="d-flex flex-row mt-4 mb-2 align-items-center">
        <div class="col-0">
            <select id="genre-filter" multiples="multiples" class="select2-genre" style="width:200px">
                <option value="">All Genres</option>
            </select>
        </div>
        <div class="input-group col-3">
            <input type="text" id="title-filter" asp-for="SearchString" class="form-control border-0 small" placeholder="Movie..." />
            <input type="submit" id="search-button" value="Filter" onclick="submitSearch(event)" class="btn btn-primary" />
        </div>
    </div>
</form>

<table id="table"
       data-toggle="table"
       data-query-params="queryParams"
       data-pagination="true"
       data-id-field="id"
       data-page-list="[10, 25, 50, 100, all]"
       data-side-pagination="server"
       data-url="https://localhost:7022/Favourites/Paginate"
       data-method="POST"
       data-search="false"
       data-locale="en-US">
    <thead>
        <tr>
            <th data-field="title">Title</th>
            <th data-field="releaseDate" data-formatter="dateFormat">Release Date</th>
            <th data-field="genreName">Genre</th>
            <th data-field="" data-formatter="operateFormatter">Actions</th>
        </tr>
    </thead>
</table>

@section scripts {
    <script>
        var $table = $('#table')
        var $remove = $('#remove')
        var selections = []

        $(function () {
            var select = $('#genre-filter');

            $.ajax({
                url: 'https://localhost:7022/Genre/UsedGenres',
                type: 'GET',
                success: function (response) {
                    $.each(response, function (index, item) {
                        select.append('<option>' + item.text + '</option>');
                    });
                }
            });

            function deleteMovieForm(e) {
                var id = $('#delete-movie-id').val();

                $.ajax({
                    url: `https://localhost:7022/Movies/Delete?id=${id}`,
                    type: 'POST',
                    contentType: 'application/json-patch+json',
                    success: function (response) {
                        alert("Movie deleted successfully!")
                        //$('#table').bootstrapTable('refresh')
                        location.reload();
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert("Something went wrong...")
                    }
                });
            }

            $('#deleteMovie').on('submit', function (event) {
                event.preventDefault();
                deleteMovieForm(event);
            });


        });

        function getIdSelections() {
            return $.map($table.bootstrapTable('getSelections'), function (row) {
                return row.id
            })
        }

        function responseHandler(res) {
            $.each(res.rows, function (i, row) {
                row.state = $.inArray(row.id, selections) !== -1
            })
            return res
        }

        function detailFormatter(index, row) {
            var html = []
            $.each(row, function (key, value) {
                html.push('<p><b>' + key + ':</b> ' + value + '</p>')
            })
            return html.join('')
        }

        function favAlert() {
            alert("Added to favourites!");
        }

        function operateFormatter(value, row, index) {
            var inFavorites = row.inFavorites === true; // assuming the `inFavorites` property is returned by the server
            var icon = inFavorites ? 'fa-heart' : 'fa-heart-broken';
            var title = inFavorites ? 'Remove from favorites' : 'Add to favorites';

            return [
                '<div style="display: flex; gap: 10px">',
                `<a class="details" href="/Movies/Details/${row.id}" title="Details">`,
                '<i class="fa fa-eye"></i>',
                '</a>',
                `<a class="like" href="@Url.Action("Index","Favourites")" title="Like" data-id="${row.id}">`,
                '<i class="fa fa-heart-broken"></i>',
                '</a>',
                '</div>'
            ].join('');
        }

        $(document).on('click', '.like', function () {
            var movieId = $(this).data('id');
            var token = localStorage.getItem('token');

            $.ajax({
                url: `https://localhost:7022/Favourites/Remove?movieId=${movieId}&token=${token}`,
                method: 'POST',
                success: function () {
                    alert('Movie added/removed to favourites!');
                },
                error: function () {
                    alert('An error occurred');
                }
            });
        });

        function deleteMovie(id) {
            $('#delete-movie-id').val(id);
        }

        
        function submitSearch(event){
            event.preventDefault()
            $('#table').bootstrapTable('refresh')
        }

        function totalTextFormatter(data) {
            return 'Total'
        }

        function totalNameFormatter(data) {
            return data.length
        }

        function totalPriceFormatter(data) {
            var field = this.field
            return '$' + data.map(function (row) {
                return +row[field].substring(1)
            }).reduce(function (sum, i) {
                return sum + i
            }, 0)
        }

        $(document).ready(function () {
            $('.select2-genre').select2();
            $('.select2-movie').select2();
        });

        function queryParams(params) {
            const genreFilter = $('#genre-filter').val();
            const titleFilter = $('#title-filter').val();
            var search = [];
            var token = localStorage.getItem('token');
            search.push({
                name: "Genre",
                value: genreFilter
            });
            search.push({
                name: "Title",
                value: titleFilter
            });
            search.push({
                name: "Token",
                value: token
            });
            params.search = search;
            return JSON.stringify(params);
        }

        function dateFormat(value, row, index) {
            if (value) {
                var date = new Date(value);
                var day = date.getDate();
                var month = date.getMonth() + 1;
                var year = date.getFullYear();

                // Adiciona um zero à esquerda para dias e meses menores que 10
                day = day < 10 ? '0' + day : day;
                month = month < 10 ? '0' + month : month;

                // Formata a data no formato desejado
                return day + '-' + month + '-' + year;
            } else {
                return '-';
            }
        }

    </script>
}